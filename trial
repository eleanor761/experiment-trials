// Generate participant ID at the start
let participant_id = `participant${Math.floor(Math.random() * 999) + 1}`;
const completion_code = generateRandomString(3) + 'zvz' + generateRandomString(3);

// Function to generate a random string of specified length
function generateRandomString(length) {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}

// Initialize jsPsych
const jsPsych = new jsPsychModule.JsPsych({
  show_progress_bar: false
});

// Create a random filename for data saving
const filename = jsPsych.randomization.randomID(10) + ".csv";
let timeline = [];

// Define the consent form 
const consent = {
    type: jsPsychHtmlButtonResponse,  
    stimulus: `
        <div style="width: 800px; margin: 0 auto; text-align: left">
            <h3>Consent to Participate in Research</h3>
            
            <p>The task you are about to do is sponsored by University of Wisconsin-Madison. It is part of a protocol titled "What are we learning from language?"</p>

            <p>The task you are asked to do involves making simple responses to words and sentences. For example, you may be asked to rate a pair of words on their similarity or to indicate how true you think a given sentence is. More detailed instructions for this specific task will be provided on the next screen.</p>

            <p>This task has no direct benefits. We do not anticipate any psychosocial risks. There is a risk of a confidentiality breach. Participants may become fatigued or frustrated due to the length of the study.</p>

            <p>The responses you submit as part of this task will be stored on a sercure server and accessible only to researchers who have been approved by UW-Madison. Processed data with all identifiers removed could be used for future research studies or distributed to another investigator for future research studies without additional informed consent from the subject or the legally authorized representative.</p>

            <p>You are free to decline to participate, to end participation at any time for any reason, or to refuse to answer any individual question without penalty or loss of earned compensation. We will not retain data from partial responses. If you would like to withdraw your data after participating, you may send an email lupyan@wisc.edu or complete this form which will allow you to make a request anonymously.</p>

            <p>If you have any questions or concerns about this task please contact the principal investigator: Prof. Gary Lupyan at lupyan@wisc.edu.</p>

            <p>If you are not satisfied with response of the research team, have more questions, or want to talk with someone about your rights as a research participant, you should contact University of Wisconsin's Education Research and Social & Behavioral Science IRB Office at 608-263-2320.</p>

            <p><strong>By clicking the box below, I consent to participate in this task and affirm that I am at least 18 years old.</strong></p>
        </div>
    `,
    choices: ['I Agree', 'I Do Not Agree'],
    data: {
        trial_type: 'consent'
    },
    on_finish: function(data) {
        if(data.response == 1) {
            jsPsych.endExperiment('Thank you for your time. The experiment has been ended.');
        }
    }
};

// Instructions block
const training_instructions = {
    type: jsPsychHtmlKeyboardResponse,  
    stimulus: `
        <p>In this task, you will be learning new words for a collection of actions. 
        For each trial, click the word that matches the video. If your response is correct, 
        you will hear a 'bleep,' and if it is wrong, you will hear a buzz. 
        Please do your best to be as accurate as possible. </p>
        <p>Press any key to begin.</p>
    `,
};

// Function to get video path from filename
function getTrainingPath(stimName) {
    return `stimuli/initials/${stimName}`;
}

function getTrialPath(stim) {
    const word = stim.word
    console.log(word)
    const stimName = stim.filename;
    return `stimuli/${word}/${stimName}`;
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]]; // swap
  }
  return array;
}

// Function to create TRAINING trials from the CSV data
function createTrainingTrials(trainingData) { 
    const trainingTrials = [];
    
    trainingData.forEach(trial => {
        // Try different possible field names for the filename
        const videoFile = trial.filename;
        
        if (!videoFile) {
            console.warn('Trial missing filename field:', trial);
            return;
        }
        
        const choices = shuffle([trial.word, trial.opponent])
        const videoResponseTrial = {
            type: jsPsychVideoButtonResponse,
            stimulus: [getTrainingPath(videoFile)],
            // Randomize order of choices for each trial!
            choices: choices, //TODO: ask if random is okay
            width: 640,
            height: 480,
            controls: true,
            autoplay: true,
            prompt: "choose which word matches the video", 
            // Store all the original trial data
            data: {
                subCode: participant_id,
                trial_num: trial.trial_num,
                word: trial.word,
                dimension: trial.dimension,
                filename: videoFile,
                choices: choices,
                action: trial.action,
                trial_type: 'video-button-response',
                stage: 'training'
            },

            on_finish: function(data) {
                data.rt = Math.round(data.rt);
                console.log(data.response)

                data.description = data.choices[data.response];
                data.correct = (data.description === data.word) ? 1 : 0;

                // Log the trial data after each trial
                console.log(`Trial ${data.trial_num} completed. Response recorded:`, {
                    trial_num: data.trial_num,
                    word: data.word,
                    rt: data.rt,
                    description: data.description
                });
            }
        };

        trainingTrials.push(videoResponseTrial);
    });
    
    //TODO: enable all trials
    return trainingTrials;
}

const experiment_instructions = {
    type: jsPsychHtmlKeyboardResponse,  
    stimulus: `
        <p> This next task is just like the previous section, but this time you will not hear any feedback for your answers.</p>
        <p> Please click the word that matches the action <p>
        <p>Press any key to begin.</p>
    `,
}

// Function to create EXPERIMENT trials from the CSV data
function createExperimentTrials(experimentData) {
    const experimentTrials = [];
    
    experimentData.forEach(trial => {
        // Try different possible field names for the filename
        const videoFile = trial;
        
        if (!videoFile) {
            console.warn('Trial missing filename field:', trial);
            return;
        }
        
        const choices = shuffle([trial.word, trial.opponent])
        // create video button response trial for testing
        const videoResponseTrial = {
            type: jsPsychVideoButtonNoFeedback,
            stimulus: [getTrialPath(videoFile)],
            // Randomize order of choices for each trial
            choices: choices,
            width: 640,
            height: 480,
            controls: true,
            autoplay: true,
            prompt: "choose which word matched the video", 
            // Store all the original trial data
            data: {
                subCode: participant_id,
                trial_num: trial.trial_num,
                word: trial.word,
                dimension: trial.dimension,
                choices: choices,
                filename: videoFile.filename,
                correct: 'yes',
                trial_type: 'video-button-response',
                stage: 'experiment'
            },
            on_finish: function(data) {
                data.rt = Math.round(data.rt);
                
                data.description = data.choices[data.response];
                data.correct = (data.description === data.word) ? 1 : 0;
                
                // Log the trial data after each trial
                console.log(`Trial ${data.trial_num} completed. Response recorded:`, {
                    trial_num: data.trial_num,
                    word: data.word,
                    rt: data.rt,
                    response: data.response
                });
            }
        };

        experimentTrials.push(videoResponseTrial);
    });
    
    //TODO: enable all trials
    return experimentTrials;
}

// Preload media files
const preload = {
    type: jsPsychPreload, 
    auto_preload: true,
    audio: ['stimuli/bleep.wav', 'stimuli/buzz.wav'] 
};

// function to filter and format data for saving
function getFilteredData() {
    console.log("=== STARTING getFilteredData ===");
    
    // Get all data
    const allTrials = jsPsych.data.get().values();
    console.log("Total trials found:", allTrials.length);
    
    // Filter to only video-button-response trials
    const trials = allTrials.filter(trial => trial.trial_type === 'video-button-response');
    console.log("Video-button-response trials found:", trials.length);
    
    if (trials.length === 0) {
        console.error("No video-button-response trials found!");
        console.log("Available trial types:", [...new Set(allTrials.map(t => t.trial_type))]);
        return '';
    }
    
    try {
        // Define the columns we want to keep
        const columns = ['subCode', 'trial_num', 'word', 'dimension', 'filename', 'rt', 'description', 'correct', 'stage'];
        
        // Create header row
        const header = columns.join(',');
        console.log("CSV Header:", header);
        
        // Create data rows
        const rows = trials.map((trial, index) => {
            console.log(`Processing trial ${index}:`, trial);
            
            return columns.map(column => {
                let value = trial[column];
                
                // Handle missing description
                if (column === 'description' && !value) {
                    // If description is missing, create it from choices and response
                    if (trial.choices && typeof trial.response === 'number') {
                        value = trial.choices[trial.response];
                        console.log(`Generated description for trial ${index}:`, value);
                    } else {
                        value = 'no_response';
                    }
                }
                
                console.log(`Column ${column} value:`, value, typeof value);
                
                if (value === null || value === undefined) {
                    return '';
                } else if (typeof value === 'string') {
                    // Properly escape string values for CSV
                    return `"${value.replace(/"/g, '""')}"`;
                } else {
                    return value;
                }
            }).join(',');
        });
        
        // Combine header and rows
        const finalCSV = header + '\n' + rows.join('\n');
        console.log("=== FINAL CSV DATA ===");
        console.log(finalCSV);
        console.log("=== END CSV DATA ===");
        
        return finalCSV;
    } catch (error) {
        console.error("Error in getFilteredData:", error);
        console.error("Error stack:", error.stack);
        
        // Return a simple valid CSV as fallback
        const fallbackCSV = `subCode,error\n"${participant_id}","${error.message}"`;
        return fallbackCSV;
    }
}


// Configure data saving
const save_data = {
    type: jsPsychPipe,
    action: "save",
    experiment_id: "IHT7GM0Seh2K",
    filename: `${participant_id}.csv`,
    data_string: getFilteredData,
    success_callback: function() {
        console.log('Data saved successfully to DataPipe!');
        console.log('Participant ID:', participant_id);
        console.log('Filename:', `${participant_id}.csv`);
        jsPsych.data.addProperties({
            completed: true
        });
    },
    error_callback: function(error) {
        console.error('Error saving to DataPipe:', error);
        console.error('Error details:', JSON.stringify(error));
        
        // Try to get more information about the error
        if (error.response) {
            console.error('Response status:', error.response.status);
            console.error('Response data:', error.response.data);
        }
        
        // Display error to user
        jsPsych.endExperiment(`<p>There was an error saving your data. Please contact the researcher with this information: ${error}</p><p>Error code: ${error.status || 'unknown'}</p>`);
    }
};

const completion_code_trial = {
  type: jsPsychHtmlButtonResponse,
  stimulus: function() {
      return `
          <p>You have completed the main experiment!</p>
          <p>Your completion code is: <strong>${completion_code}</strong></p>
          <p>Please make a note of this code - you will need to enter it in SONA to receive credit.</p>
          <p>You can close the page now.</p>
      `;
  },
  choices: ['Finish'],
  data: {
      trial_type: 'completion'
  },
  on_finish: function() {
      window.location.href = `https://uwmadison.sona-systems.com/default.aspx?logout=Y`;
  }
};

// Main function to run the experiment
async function runExperiment() {
    try {
        console.log('Starting experiment...');
        console.log('Participant ID:', participant_id);
        console.log('Completion code:', completion_code);
        
        // Load trials
        const trialsData = await loadTrials();
        console.log('Loaded trials:', trialsData.length);

        const trainingData = trialsData.filter(trial => trial.stage === 'training');
        console.log('Training trials:', trainingData.length);

        const experimentData = trialsData.filter(trial => trial.stage === 'experiment');
        console.log('Experiment trials:', experimentData.length);
        
        // Log sample trial data
        if (trialsData.length > 0) {
            console.log('Sample trial data:', trialsData[0]);
        }
        
        // Create full timeline with loaded trials
        const trainingTrials = createTrainingTrials(trainingData);
        console.log('Created training trials:', trainingTrials.length);

        const experimentTrials = createExperimentTrials(experimentData);
        console.log('Created experiment trials:', experimentTrials.length);

        timeline = [
            consent,
            preload,
            training_instructions,
            ...trainingTrials,
            experiment_instructions,
            ...experimentTrials,
            save_data,
            completion_code_trial
        ]

        console.log('Timeline initialized with', timeline.length, 'items');
        console.log('Starting jsPsych...');
        //generateCSV();

        // Run the experiment
        jsPsych.run(timeline);
    } catch (error) {
        console.error('Error running experiment:', error);
        console.error('Error stack:', error.stack);
        // Display error message on the page
        document.getElementById('jspsych-target').innerHTML = `
            <div style="max-width: 800px; margin: 50px auto; padding: 20px; background: #f8f8f8; border-radius: 5px;">
                <h2>Error Starting Experiment</h2>
                <p>There was a problem starting the experiment. Please try refreshing the page.</p>
                <p>If the problem persists, please contact the researcher.</p>
                <p>Technical details: ${error.message}</p>
                <pre style="background: #f1f1f1; padding: 10px; overflow: auto;">${error.stack}</pre>
            </div>
        `;
    }
}

// Function to generate a CSV with trials
async function generateCSV() {
    const num_trials = 9; // Number of trials per word
    const initials = ["barbul", "batent", "cabush", "fremple", "joicate",
                "lorice", "nulmut", "pulact", "traimin"];

    const columns = ['trial_num', 'word','dimension', 'filename', 'opponent', 'stage', 'balance'];
    csvRows = [];
    csvRows.push(columns.join(','));

    let trial_num = 0;
    // Generate TRAINING trials
    for (word of initials) {
        for (let i = 0; i < num_trials; i++) {
            const dimension = 'initial';
            const filename = `${word}${(i%3) + 1}.mp4`;
            const otherWords = ['haggen', 'plandar', 'boskot', 'chatten', 'clodle', 'doffle', 'dupen', 'kelder', 'pegget', 'filvin', 'fisple', 'gazzer',
                'pentant', 'pilver', 'poddle', 'sindar', 'sorrel', 'wogget', 'crinter', 'flinter'];
            
            // use random words, limit exclusivity, 
            // each opponent should be completely novel word each time
            const opponent = otherWords[i % otherWords.length];
            const stage = 'training';

            const row = [trial_num, word, dimension, filename, opponent, stage].join(',');
            csvRows.push(row);
            trial_num++;
        }
    }

    // Generate EXPERIMENT trials - ONE INITIAL PER WORD
    // First, add one initial trial for each word
    for (word of initials) {
        const dimension = 'initial';
        const filename = `${word}1.mp4`; // Use only the first variation
        const otherWords = ['fibble', 'nocket', 'trindle', 'napper', 'gluffle', 'dimmer', 'nomble', 'plancher', 
            'crindle', 'tuffer', 'bramble', 'frabble', 'coppen', 'muffer', 'crabble', 'tromper', 'lorple'];
        const opponent = shuffle(otherWords)[0];
        const stage = 'experiment';

        const row = [trial_num, word, dimension, filename, opponent, stage].join(',');
        csvRows.push(row);
        trial_num++;
    }

    // Then add the dimension test trials
    const dimensions = ['_diff_obj', '_diff_proc', '_diff_state', 
                        '_same_obj', '_same_proc', '_same_state'] // dimensions to test

    for (word of initials) {
        for (let i = 0; i < dimensions.length; i++) {
            const dimension = dimensions[i];
            const filename = `${word}${dimension}.mp4`;
            const otherWords =  ['fibble', 'nocket', 'trindle', 'napper', 'gluffle', 'dimmer', 'nomble', 'plancher', 
                'crindle', 'tuffer', 'bramble', 'frabble', 'corple', 'muffer', 'crabble', 'tromper', 'lorple'];
            const opponent = shuffle(otherWords)[0];
            const stage = 'experiment';

            const row = [trial_num, word, dimension, filename, opponent, stage].join(',');
            csvRows.push(row);
            trial_num++;
        }
    }

    // Combine all rows into a CSV string
    const csvContent = csvRows.join('\n');
    console.log(csvContent); // Find new csv and give it to loadTrials()

}

async function loadTrials() {
    try {
        const csvFilename = 'trials.csv'; // Path to your trials file
        
        const response = await fetch(csvFilename);
        const csvText = await response.text(); 
        
        const results = Papa.parse(csvText, {
            header: true,
            skipEmptyLines: true,
            dynamicTyping: true
        });

        console.log('Sample trial structure:', results.data[0]);

        // Shuffle the trials
        let shuffledData = jsPsych.randomization.shuffle([...results.data]);
        
        // Update trial numbers to match new order
        shuffledData = shuffledData.map((trial, index) => ({
            ...trial,
            trial_num: index
        }));
        
        return shuffledData;
    } catch (error) {
        console.error('Error loading trials:', error);
        return [];
    }
}

// Wait for the page to load before starting the experiment
document.addEventListener('DOMContentLoaded', runExperiment);